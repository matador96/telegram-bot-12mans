const messages = require("./../consts/messages");
const { isPrivate } = require("./../handles/user");
const {
  parseMatchDetails,
  parseDeleteMatchDetails,
} = require("./../helpers/match");
const { isAdmin } = require("./../consts/admins");
const {
  addMatch,
  deleteMatchById,
  getMatchById,
  updateMatch,
} = require("./../core/db");
const {
  refreshMatchMessage,
  messageForAllGenerate,
  infoMatch,
  generateTeamTable,
  generatePlayerList,
} = require("./main");

const CHAT_ID = process.env.CHANNEL_ID;

const { parseMatchResult } = require("./../helpers/match");
const { getActiveMatch } = require("./../core/db");

const pendingMessageForAllGenerate = (matchInfo) => {
  const text =
    matchInfo.status === "pending"
      ? "üëç _–ù–µ –º–µ–Ω—è–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã! –ê–¥–º–∏–Ω—ã –ø–æ—Å–ª–µ –∏–≥—Ä—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã._"
      : "–ú–∞—Ç—á –æ–∫–æ–Ω—á–µ–Ω";

  return {
    text: `
‚öΩÔ∏è *–ú–∞—Ç—á ${matchInfo.status === "pending" ? "–∏–≥—Ä–∞–µ—Ç—Å—è" : "–∑–∞–≤–µ—Ä—à–µ–Ω"}* *ID:* \`${
      matchInfo.id
    }\`

${infoMatch(matchInfo)}

${generateTeamTable(matchInfo)}

${text}`,

    parse_mode: "Markdown",
  };
};

const refreshMessagePending = async (bot, matchId) => {
  const matchInfo = await getMatchById(matchId);

  if (!matchInfo) {
    return;
  }

  // if (matchInfo.status !== "pending") {
  //   return;
  // }

  const messageForAll = pendingMessageForAllGenerate(matchInfo);

  await bot.telegram
    .editMessageText(CHAT_ID, matchInfo.messageId, null, messageForAll, {
      reply_markup: {
        inline_keyboard: [],
      },
      parse_mode: "Markdown",
    })
    .catch((e) => {
      console.log(e);
    });
};

const handleNewMatch = (bot) => async (ctx, obj) => {
  if (!isAdmin(obj.message.from.id)) {
    return isPrivate(bot, ctx, obj);
  }

  const chatId = ctx.chat.id;
  const message = obj.message.text;

  const activeMatch = await getActiveMatch();
  if (activeMatch) {
    bot.telegram.sendMessage(
      chatId,
      `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á ID: ${activeMatch.id}, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –µ–≥–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π`,
      {
        parse_mode: "html",
      }
    );
    return;
  }

  const matchInfo = parseMatchDetails(message);
  if (typeof matchInfo === "string") {
    await bot.telegram.sendMessage(chatId, matchInfo, {
      parse_mode: "html",
    });
    return;
  }

  const generatedUuid = new Date().getTime();

  const successMatchCreated = `–ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω! ID –º–∞—Ç—á–∞: ${generatedUuid}`;

  await bot.telegram.sendMessage(chatId, successMatchCreated, {
    parse_mode: "html",
  });

  const messageForAll = messageForAllGenerate({
    ...matchInfo,
    id: generatedUuid,
  });

  const messageInGroup = await bot.telegram.sendMessage(
    CHAT_ID,
    messageForAll,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ó–∞–ª–µ—Ç–µ—Ç—å –Ω–∞ –º–∞—Ç—á",
              callback_data: `match:join:${generatedUuid}`,
            },
          ],
          [
            {
              text: "–õ–∏–≤–Ω—É—Ç—å —Å –º–∞—Ç—á–∞",
              callback_data: `match:leave:${generatedUuid}`,
            },
          ],
        ],
      },
      parse_mode: "Markdown",
    }
  );

  const matchDetails = {
    ...matchInfo,
    id: generatedUuid,
    status: "active",
    messageId: messageInGroup.message_id,
  };

  await bot.telegram.pinChatMessage(CHAT_ID, messageInGroup.message_id);

  await addMatch(matchDetails);
};

const handleResultMatch = (bot) => async (ctx, obj) => {
  if (!isAdmin(obj.message.from.id)) {
    return isPrivate(bot, ctx, obj);
  }

  const chatId = ctx.chat.id;
  const messageId = obj.message.message_id;

  const parsedMatchResult = parseMatchResult(obj.message.text);

  if (typeof parsedMatchResult === "string") {
    await bot.telegram.sendMessage(chatId, parsedMatchResult, {
      parse_mode: "html",

      reply_to_message_id: messageId,
    });
    return;
  }

  const matchId = parsedMatchResult.matchId.toString();
  const matchInfo = await getMatchById(matchId);

  if (!matchInfo) {
    await bot.telegram.sendMessage(chatId, "–ú–∞—Ç—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", {
      parse_mode: "html",
    });
    return;
  }

  if (matchInfo?.status !== "pending") {
    await bot.telegram.sendMessage(
      chatId,
      "–ú–∞—Ç—á –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è –¥–∞–∂–µ –±—Ä–æ—É(, –∂–¥–∏, –∑–∞ —á–∞—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
      {
        parse_mode: "html",
      }
    );
    return;
  }

  await bot.telegram.sendMessage(
    chatId,
    `–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞—Ç—á–∞ ID: ${matchId} –æ–±–Ω–æ–≤–ª–µ–Ω`,
    {
      parse_mode: "html",
      reply_to_message_id: messageId,
    }
  );

  await updateMatch(matchId, {
    status: "finished",
    teamScoreA: parsedMatchResult.teamScoreA,
    teamScoreB: parsedMatchResult.teamScoreB,
  });
  await refreshMessagePending(ctx, matchId);

  const whosWin =
    parsedMatchResult.teamScoreA !== parsedMatchResult.teamScoreB
      ? parsedMatchResult.teamScoreA > parsedMatchResult.teamScoreB
        ? "–≤—ã–∏–≥—Ä–∞–ª–∞ –ö–æ–º–∞–Ω–¥–∞ 1 ‚úÖ"
        : "–≤—ã–∏–≥—Ä–∞–ª–∞ –ö–æ–º–∞–Ω–¥–∞ 2 ‚úÖ"
      : "–ù–∏—á—å—è ‚ö´";

  await bot.telegram.sendMessage(
    CHAT_ID,
    `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, ${whosWin}`,
    {
      parse_mode: "html",
      reply_to_message_id: matchInfo.messageId,
    }
  );
};

const handleDeleteMatch = (bot) => async (ctx, obj) => {
  if (!isAdmin(obj.message.from.id)) {
    return isPrivate(bot, ctx, obj);
  }
  const chatId = ctx.chat.id;
  const parsedMatchObj = parseDeleteMatchDetails(obj.message.text);

  if (typeof parsedMatchObj === "string") {
    bot.telegram.sendMessage(chatId, parsedMatchObj, {
      parse_mode: "html",
    });
    return;
  }

  const matchInfo = await getMatchById(parsedMatchObj.matchId);

  if (!matchInfo) {
    await bot.telegram.sendMessage(chatId, "–ú–∞—Ç—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", {
      parse_mode: "html",
    });
    return;
  }

  await deleteMatchById(parsedMatchObj.matchId);

  if (matchInfo?.messageId) {
    await bot.telegram.unpinChatMessage(CHAT_ID, matchInfo.messageId);

    await bot.telegram.editMessageText(
      CHAT_ID,
      matchInfo.messageId,
      0,
      `–ú–∞—Ç—á ${parsedMatchObj.matchId} —É–¥–∞–ª–µ–Ω!`
    );
  }

  await bot.telegram.sendMessage(
    chatId,
    `–ú–∞—Ç—á ID: ${parsedMatchObj.matchId} —É–¥–∞–ª–µ–Ω`,
    {
      parse_mode: "html",
    }
  );

  const messageId = obj.message.message_id;
};

module.exports = {
  handleNewMatch,
  handleDeleteMatch,
  handleResultMatch,
  refreshMessagePending,
};
