const { getMatchById } = require("./../core/db");

const CHAT_ID = process.env.CHANNEL_ID;

const generatePlayerList = (players, count = 0) => {
  let list = [...players];

  if (count > 0) {
    if (players.length < count) {
      let addMass = count - players.length;

      for (let i = 0; i < addMass; i++) {
        list.push([]);
      }
    }
  }

  return list
    .map((player, index) => `${index + 1}. ${player?.fullName || ""}`)
    .join("\n");
};

const infoMatch = (matchInfo) => `*üìÖ –î–∞—Ç–∞:* \`${matchInfo.date}\`  
‚è∞ *–ù–∞—á–∞–ª–æ:* \`${matchInfo.time}\`  
üìç *–ú–µ—Å—Ç–æ:* \`${matchInfo.location}\`  
üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:* \`${matchInfo.playerCount} (${
  matchInfo.playerCount / 2
}x${matchInfo.playerCount / 2})\`  
üíµ *–¶–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è:* \`${matchInfo.cost}\`  
üìù *–î–µ—Ç–∞–ª–∏:* \`${matchInfo.additionalDetails}\``;

const getEmoji = (a, b) => {
  if (a > b) {
    return "‚úÖ –í—ã–∏–≥—Ä–∞–ª–∞ üèÖ |";
  } else if (a < b) {
    return "‚ùå –ü—Ä–æ–∏–≥—Ä–∞–ª–∞ |";
  } else {
    return "‚ö´";
  }
};

const generateTeamTable = (matchInfo) => {
  // –†–∞–∑–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã: team 'a' –∏ team 'b'

  const players = matchInfo.players;
  const teamScoreA = matchInfo?.teamScoreA || 0;
  const teamScoreB = matchInfo?.teamScoreB || 0;

  const teamA = players.filter((player) => player.team === "a");
  const teamB = players.filter((player) => player.team === "b");

  const isFinished = matchInfo.status === "finished";

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
  const table = `**${getEmoji(teamScoreA, teamScoreB)} –ö–æ–º–∞–Ω–¥–∞ 1 ${
    matchInfo.manishki === "a" ? "(–º–∞–Ω–∏—à–∫–∏)" : "(–Ω–∞—á–∏–Ω–∞—é—Ç —Å —Ü–µ–Ω—Ç—Ä–∞)"
  }**
${generatePlayerList(teamA)}

**${getEmoji(teamScoreB, teamScoreA)}  –ö–æ–º–∞–Ω–¥–∞ 2 ${
    matchInfo.manishki === "b" ? "(–º–∞–Ω–∏—à–∫–∏)" : "(–Ω–∞—á–∏–Ω–∞—é—Ç —Å —Ü–µ–Ω—Ç—Ä–∞)"
  }**
${generatePlayerList(teamB)}

–°—á–µ—Ç: ${teamScoreA} : ${teamScoreB}`;

  return table;
};

const messageForAllGenerate = (matchInfo, userAction = {}) => {
  const userInfo = userAction?.fromObj;
  const userActionText =
    userAction?.action === "join" ? "–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–∞—Ç—á" : "–≤—ã—à–µ–ª –∏–∑ –º–∞—Ç—á–∞";
  const userText = userAction?.fromObj?.id
    ? `
    
üë§ [${
        userInfo?.first_name || userInfo?.last_name || userInfo?.id
      }](tg://user?id=${userInfo.id}) ${userActionText}`
    : "";

  const text =
    matchInfo.players.length !== matchInfo.playerCount
      ? "‚è≥ _–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—É—Ç—Å—è –≤—Å–µ –∏–≥—Ä–æ–∫–∏, –∏ –¥–æ –º–∞—Ç—á–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —á–∞—Å, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–Ω—ã–º–∏ —Å–æ—Å—Ç–∞–≤–∞–º–∏._ "
      : "üëç _–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–æ–±—Ä–∞–Ω—ã, –∑–∞ —á–∞—Å –¥–æ –∏–≥—Ä—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–æ—Å—Ç–∞–≤—ã._";
  return {
    text: `
‚öΩÔ∏è *–ú–∞—Ç—á ${matchInfo.status === "active" ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–∑–∞–≤–µ—Ä—à–µ–Ω"}* *ID:* \`${
      matchInfo.id
    }\` ${userText}

${infoMatch(matchInfo)}

üë§ *–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ${matchInfo?.players?.length}/${matchInfo.playerCount}: *  
${
  matchInfo?.players?.length > 0
    ? generatePlayerList(matchInfo?.players || [], matchInfo.playerCount)
    : "üö´ –ü—É—Å—Ç–æ"
}

${text}  
`,
    parse_mode: "Markdown",
  };
};

const pendingMessageForAllGenerate = (matchInfo) => {
  const text =
    matchInfo.status === "pending"
      ? "üëç _–ù–µ –º–µ–Ω—è–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã! –ê–¥–º–∏–Ω—ã –ø–æ—Å–ª–µ –∏–≥—Ä—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã._"
      : "üèÅ –ú–∞—Ç—á –æ–∫–æ–Ω—á–µ–Ω";

  return {
    text: `
‚öΩÔ∏è *–ú–∞—Ç—á ${matchInfo.status === "pending" ? "–∏–≥—Ä–∞–µ—Ç—Å—è" : "–∑–∞–≤–µ—Ä—à–µ–Ω"}* *ID:* \`${
      matchInfo.id
    }\`

${infoMatch(matchInfo)}

${generateTeamTable(matchInfo)}

${text}`,
    parse_mode: "Markdown",
  };
};

async function createMatchPendingMessage(bot, matchId) {
  const matchInfo = await getMatchById(matchId);

  if (!matchInfo) {
    return;
  }
  const messageForAll = pendingMessageForAllGenerate(matchInfo);

  await bot.telegram.sendMessage(CHAT_ID, messageForAll, {
    parse_mode: "Markdown",
  });
}

async function createMatchMessage(
  bot,
  matchId,
  messageId = null,
  userAction = {}
) {
  // –°–∫–æ–ø–∏—Ä–æ–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –∏–∑ admin,.js
  const matchInfo = await getMatchById(matchId);

  if (!matchInfo) {
    return;
  }

  const messageForAll = messageForAllGenerate(matchInfo, userAction);

  let keyboardActions = [];

  if (matchInfo.status === "active") {
    keyboardActions = [
      [
        {
          text: "‚úÖÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç—á",
          callback_data: `match:join:${matchInfo.id}`,
        },
      ],
      [
        {
          text: "‚ùå –í—ã–π—Ç–∏ –∏–∑ –º–∞—Ç—á–∞",
          callback_data: `match:leave:${matchInfo.id}`,
        },
      ],
      [{ text: "MENU ‚ò∞", callback_data: "start" }],
    ];
  }

  await bot.telegram.sendMessage(CHAT_ID, messageForAll, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: keyboardActions,
    },
  });
}

module.exports = {
  messageForAllGenerate,
  infoMatch,
  generateTeamTable,
  generatePlayerList,
  createMatchMessage,
  createMatchPendingMessage,
};
