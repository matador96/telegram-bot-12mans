const {
  getCurrentMatch,
  updateMatch,
  getAllPlayers,
  getCountOfMatches,
  addMatch,
  deleteMatchById,
  getMatchById,
} = require("./../core/db");
const { isAdmin } = require("./../consts/admins");
const messages = require("./../consts/messages");

const HelpButton = { text: "–ü–æ–º–æ—â—å", callback_data: "help" };
const StatsButton = { text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", callback_data: "stats" };
const CurrentMatchButton = { text: "–¢–µ–∫—É—â–∏–π –º–∞—Ç—á", callback_data: "current" };
const CHAT_ID = process.env.CHANNEL_ID;

const generatePlayerList = (players) => {
  return players
    .map(
      (player, index) =>
        `${index + 1}. [${player?.fullName}](tg://user?id=${player.telegramId})`
    )
    .join("\n");
};

const infoMatch = (matchInfo) => `*üìÖ –î–∞—Ç–∞:* \`${matchInfo.date}\`  
‚è∞ *–ù–∞—á–∞–ª–æ:* \`${matchInfo.time}\`  
üìç *–ú–µ—Å—Ç–æ:* \`${matchInfo.location}\`  
üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:* \`${matchInfo.playerCount} (${
  matchInfo.playerCount / 2
}x${matchInfo.playerCount / 2})\`  
üíµ *–¶–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è:* \`${matchInfo.cost}\`  
üìù *–î–µ—Ç–∞–ª–∏:* \`${matchInfo.additionalDetails}\``;

const getEmoji = (a, b) => {
  if (a > b) {
    return "‚úÖ –í—ã–∏–≥—Ä–∞–ª–∞ üèÖ |";
  } else if (a < b) {
    return "‚ùå –ü—Ä–æ–∏–≥—Ä–∞–ª–∞ |";
  } else {
    return "‚ö´";
  }
};

const generateTeamTable = (matchInfo) => {
  // –†–∞–∑–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã: team 'a' –∏ team 'b'

  const players = matchInfo.players;
  const teamScoreA = matchInfo?.teamScoreA || 0;
  const teamScoreB = matchInfo?.teamScoreB || 0;

  const teamA = players.filter((player) => player.team === "a");
  const teamB = players.filter((player) => player.team === "b");

  const isFinished = matchInfo.status === "finished";

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
  const table = `
**${getEmoji(teamScoreA, teamScoreB)} –ö–æ–º–∞–Ω–¥–∞ 1 ${
    matchInfo.manishki === "a" ? "(–º–∞–Ω–∏—à–∫–∏)" : "(–Ω–∞—á–∏–Ω–∞—é—Ç —Å —Ü–µ–Ω—Ç—Ä–∞)"
  }**
${generatePlayerList(teamA)}

**${getEmoji(teamScoreB, teamScoreA)}  –ö–æ–º–∞–Ω–¥–∞ 2 ${
    matchInfo.manishki === "b" ? "(–º–∞–Ω–∏—à–∫–∏)" : "(–Ω–∞—á–∏–Ω–∞—é—Ç —Å —Ü–µ–Ω—Ç—Ä–∞)"
  }**
${generatePlayerList(teamB)}

–°—á–µ—Ç: ${teamScoreA} : ${teamScoreB}
`;

  return table;
};

const messageForAllGenerate = (matchInfo) => {
  const text =
    matchInfo.players.length !== matchInfo.playerCount
      ? "‚è≥ _–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—É—Ç—Å—è –≤—Å–µ –∏–≥—Ä–æ–∫–∏, –∏ –¥–æ –º–∞—Ç—á–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —á–∞—Å, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–Ω—ã–º–∏ —Å–æ—Å—Ç–∞–≤–∞–º–∏._ "
      : "üëç _–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–æ–±—Ä–∞–Ω—ã, –∑–∞ —á–∞—Å –¥–æ –∏–≥—Ä—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–æ—Å—Ç–∞–≤—ã._";
  return {
    text: `
‚öΩÔ∏è *–ú–∞—Ç—á ${matchInfo.status === "active" ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–∑–∞–≤–µ—Ä—à–µ–Ω"}* *ID:* \`${
      matchInfo.id
    }\`

${infoMatch(matchInfo)}

üë§ *–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ${matchInfo?.players?.length}/${matchInfo.playerCount}: *  
${
  matchInfo?.players?.length > 0
    ? generatePlayerList(matchInfo?.players || [])
    : "üö´ –ü—É—Å—Ç–æ"
}

${text}  
`,
    parse_mode: "Markdown",
  };
};

async function refreshMatchMessage(bot, matchId) {
  // –°–∫–æ–ø–∏—Ä–æ–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –∏–∑ admin,.js
  const matchInfo = await getMatchById(matchId);

  if (!matchInfo) {
    return;
  }
  const messageForAll = messageForAllGenerate(matchInfo);

  let keyboardActions = [];

  if (matchInfo.status === "active") {
    keyboardActions = [
      [
        {
          text: "–ó–∞–ª–µ—Ç–µ—Ç—å –Ω–∞ –º–∞—Ç—á",
          callback_data: `match:join:${matchInfo.id}`,
        },
      ],
      [
        {
          text: "–õ–∏–≤–Ω—É—Ç—å —Å –º–∞—Ç—á–∞",
          callback_data: `match:leave:${matchInfo.id}`,
        },
      ],
    ];
  }

  await bot.telegram.editMessageText(
    CHAT_ID,
    matchInfo.messageId,
    null,
    messageForAll,
    {
      reply_markup: {
        inline_keyboard: keyboardActions,
      },
      parse_mode: "Markdown",
    }
  );
}

module.exports = {
  messageForAllGenerate,
  refreshMatchMessage,
  infoMatch,
  generateTeamTable,
  generatePlayerList,
};
